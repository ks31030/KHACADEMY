객체
	프로그래밍에서 데이터와 데이터를 조작하는 메서드를 포함하는 소프트웨어 객체
	객체는 현실세계의 다양한 개념을 모델링하고 코드로 구현되는 데 사용.
	특징
	1. 상태(State) : 데이터를 저장.
                    객체의 상태는 객체의 속성 또는 멤버 변수.
					이 변수들을 객체의 상태 정보를 보유.
	2. 행위(Behavior) : 객체는 특정한 동작 또는 행동을 할 수 있음.
					이러한 행동은 메서드로 구현되며,
					객체의 상태를 변경하거나 다른 객체와 상호작용하는 데
	3. 캡슐화(Encapsulation) : 객체의 상태를 보호하고, 외부에서 직접 접근하지 못하게 함.
					내부 상태를 감추고 공개된 인터페이스를 통해 상호 작용.
	4. 상속(Inheritance) : 새로운 클래스가 기존 클래스의 특성을 상속 받는 개념.
					코드의 재사용과 계층 구조를 형성하는 데 사용.
	5. 다형성(Polymorphism) : 여러 객체가 동일한 인터페이스를 공유하면서 서로 다른 방식으로 동작할 수 있는 능력을 나타냄.
	
예제.
	//색상이라는 객체 생성    color라는 매개변수(=파라미터) 입력
 	public class 색상      (String color) {
 	
 		String color; //멤버변수 color 생성
 }
 
 
메서드(Method)
	특정 작업을 수행하기 위한 코드 블록 함수
	메서드는 클래스 내에 정의 되며, 클래스의 객체들이 해당 메서드를 공유하여 사용할 수 있음.
	객체의 상태를 변경하거나 객체에 대한 작업을 수행하는 데 사용.
	ex) System.out.println(); //출력 메서드
	